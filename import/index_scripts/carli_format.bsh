import org.marc4j.marc.Record;
import org.marc4j.marc.DataField;
import org.marc4j.marc.*;
import org.solrmarc.tools.Utils;
import java.util.*;

//import org.apache.log4j.Logger;
//protected static Logger logger = Logger.getLogger(Utils.class.getName());

// define the base level indexer so that its methods can be called from the script.
// note that the SolrIndexer code will set this value before the script methods are called.
org.solrmarc.index.SolrIndexer indexer = null;

   /////////////////////////////////
   interface Comparitor {
      public boolean compare(String item, String pattern);
   }

   public class BeginsWithComparitor implements Comparitor {
      public boolean compare(String item, String pattern) {
          if (item.trim().toLowerCase(Locale.US).startsWith(pattern.toLowerCase(Locale.US))) {
             return true;
          }
          return false;
      }
   };

   public class EqualsComparitor implements Comparitor {
      public boolean compare(String item, String pattern) {
          if (item.trim().equalsIgnoreCase(pattern)) {
             return true;
          }
          return false;
      }
   };

   public class ContainsComparitor implements Comparitor {
      public boolean compare(String item, String pattern) {
        String itm = item.trim().toLowerCase(Locale.US);
        String pat = pattern.toLowerCase(Locale.US);
        String rep = itm.replaceFirst(pat, "###match###");
        if (!rep.equals(itm)) {
                return true;
        }
        return false;
      }
   };

   public class TokenizedContainsComparitor extends ContainsComparitor {
      public boolean compare(String item, String pattern) {
         String[] tokens = item.split("\\s+");
         for (String token : tokens) {
            if (super.compare(token, pattern)) return true;
         }
         return false;
      }
   };


TokenizedContainsComparitor tokenizedContainsComparitor = new TokenizedContainsComparitor();
ContainsComparitor containsComparitor = new ContainsComparitor();
EqualsComparitor equalsComparitor = new EqualsComparitor();
BeginsWithComparitor beginsWithComparitor = new BeginsWithComparitor();

    public Set getFormat(Record record)
    {
        Set result = new LinkedHashSet();

        String tleaderChar1 = indexer.getFirstFieldVal(record, "000[6]");
        if (tleaderChar1 != null) {
            leaderChar1 = tleaderChar1.toLowerCase(Locale.US);
        } else {
            leaderChar1 = "";
        }

        String recType = leaderChar1; // synonym

        String tleaderChar2 = indexer.getFirstFieldVal(record, "000[7]");
        if (tleaderChar2 != null) {
            leaderChar2 = tleaderChar2.toLowerCase(Locale.US);
        } else {
            leaderChar2 = "";
        }

        if(leaderChar1.equals("a")){
           if(leaderChar2.equals("a")){
              result.add("Book");
           } else if (leaderChar2.equals("b")) {
              result.add("Journal / Magazine");
           } else if (leaderChar2.equals("c")) {
              result.add("Archival Collection");
           } else if (leaderChar2.equals("d")) {
              result.add("Archive");
           } else if (leaderChar2.equals("i")) {
              result.add("Textual Material");
           } else if (leaderChar2.equals("m")) {
              result.add("Book");
           } else if (leaderChar2.equals("s")) {
              result.add("Journal / Magazine");
           }
        } else if (leaderChar1.equals("b")) {
           result.add("Archive");
        } else if (leaderChar1.equals("c")) {
           result.add("Music Score");
        } else if (leaderChar1.equals("d")) {
           result.add("Music Manuscript");
        } else if (leaderChar1.equals("e")) {
           result.add("Map");
        } else if (leaderChar1.equals("f")) {
           result.add("Manuscript Map");
        } else if (leaderChar1.equals("g")) {
           result.add("Movie");
        } else if (leaderChar1.equals("i")) {
           result.add("Spoken Word Recording");
        } else if (leaderChar1.equals("j")) {
           result.add("Music Recording");
        } else if (leaderChar1.equals("k")) {
           result.add("2D Art");
        } else if (leaderChar1.equals("m")) {
           result.add("Software / Computer File");
        } else if (leaderChar1.equals("o")) {
           result.add("Kit");
        } else if (leaderChar1.equals("p")) {
           result.add("Mixed Material");
        } else if (leaderChar1.equals("r")) {
           result.add("3D Object");
        } else if (leaderChar1.equals("t")) {
           result.add("Manuscript");
        }

        String medium = "";

        String t007Char1 = indexer.getFirstFieldVal(record, "007[0]");
        if (t007Char1 != null)  {
           t007Char1 = t007Char1.toLowerCase(Locale.US);
           medium = t007Char1;
        } else {
           t007Char1 = "";
        }

        String t007Char2 = indexer.getFirstFieldVal(record, "007[1]");
        if (t007Char2 != null) {
           t007Char2 = t007Char2.toLowerCase(Locale.US);
           medium += t007Char2;
        } else {
           t007Char2 = "";
        }

        // NOTE:
        // Since set_medium2 is composed from the 338$a
        // (controlled vocabulary); and the 300$a, 305$a, 538$a and
        // 690$a (all free text), I guess we need to perform more
        // forgiving substring matching, instead of stricter complete
        // (or mostly complete) string matching. Therefore we will
        // use setItemContains() to match on set_medium2 below.
        Set set_medium2 = new LinkedHashSet();
        addSubfieldDataToSet(record, set_medium2, "300", "a");
        addSubfieldDataToSet(record, set_medium2, "300", "b");
        addSubfieldDataToSet(record, set_medium2, "300", "e");
        addSubfieldDataToSet(record, set_medium2, "305", "a");
        addSubfieldDataToSet(record, set_medium2, "305", "b");
        addSubfieldDataToSet(record, set_medium2, "305", "c");
        addSubfieldDataToSet(record, set_medium2, "338", "a");
        addSubfieldDataToSet(record, set_medium2, "344", "c");
        addSubfieldDataToSet(record, set_medium2, "538", "a");
        addSubfieldDataToSet(record, set_medium2, "690", "a");

        Set set_gmd = new LinkedHashSet();
        addSubfieldDataToSet(record, set_gmd, "245", "h");

        Set carrierTerm = new LinkedHashSet();
        addSubfieldDataToSet(record, carrierTerm, "338", "a");

        Set carrierCode = new LinkedHashSet();
        addSubfieldDataToSet(record, carrierCode, "338", "b");

        if (setItemContains(set_gmd, "electronic resource") ||
            setItemEquals(carrierTerm, "online resource")||
            setItemBeginsWith(carrierTerm, "computer") ||
            setItemBeginsWith(carrierCode, "c")) {
           result.add("Electronic");
        }

        if (setItemContains(set_gmd, "microform") ||
            setItemBeginsWith(carrierTerm, "microf") ||
            setItemBeginsWith(carrierTerm, "microo") ||
            setItemBeginsWith(carrierTerm, "aperture") ||
            setItemBeginsWith(carrierCode, "h") ||
            (t007Char1.equals("h"))
            ) {
           result.add("Microform");
        }

        // Blu-ray:
        // ((Medium=vd OR GMD=video*) AND (Medium2=bluray OR Medium2="blu ray" OR Medium2="blu-ray"))
        // OR
        // (RecType=g AND Medium=v* AND (Medium2=bluray OR Medium2="blu ray" OR Medium2="blu-ray"))
        if (
              ( ( itemEquals(medium, "vd") || setItemContains(set_gmd, "video") ) && ( setItemContains(set_medium2, "bluray") || setItemContains(set_medium2, "blu ray") || setItemContains(set_medium2, "blu-ray")) )
              ||
              ( itemEquals(recType, "g") && itemBeginsWith(medium, "v") && ( setItemContains(set_medium2, "bluray") || setItemContains(set_medium2, "blu ray") || setItemContains(set_medium2, "blu-ray")) )
        ) {
           result.add("Blu-ray");
        }

        // DVD:
        // ((Medium=vd OR GMD=video*) AND Medium2=dvd*)
        //  OR
        // (RecType=g AND Medium=v* AND Medium2=dvd*)
        if (
             ((itemEquals(medium, "vd") || setItemContains(set_gmd, "video")) && setItemContains(set_medium2, "dvd"))
             ||
             (itemEquals(recType, "g") && itemBeginsWith(medium, "v") && setItemContains(set_medium2, "dvd"))
        ) {
           result.add("DVD");
        }

        // VHS:
        // (Medium=vf OR GMD=video* OR RecType=g) AND (Medium2=vhs OR Medium2=videocassette)
        if (
              (itemEquals(medium, "vf") || setItemContains(set_gmd, "video") || itemEquals(recType, "g")) && (setItemContains(set_medium2, "vhs") || setItemContains(set_medium2, "videocassette"))
        ) {
           result.add("VHS");
        }

        // Slides:
        // RecType=g AND (GMD="slide" OR Medium=gs OR Medium=gt)
        if (
              itemEquals(recType, "g") && ( setItemContains(set_gmd, "slide") || itemEquals(medium, "gs") ||  itemEquals(medium, "gt")  )
        ) {
           result.add("Slide");
        }

        // Film:
        // (RecType=g AND (GMD="motion picture" or Medium=m*)) OR Medium2=”film reel”
        if (
              ( ( itemEquals(recType, "g") && ( setItemContains(set_gmd, "motion picture") || itemBeginsWith(medium, "m") ) ) || setItemContainsTokenized(set_medium2, "film reel")  )
        ) {
           result.add("Film");
        }

        /********
        Audio CD:

        (RecType="j" <musical sound recording> OR RecType="i" <non-musical sound recording> OR 245h="sound" OR 007ab="sd" <Sound recording, sound disc)
 
        <Stanza 1 pulls anything that is a sound recording. This is necessary to establish before the other conditions can be met, especially the 007/byte 06="g">
 
        AND any of the following options 1-3 are present:
 
        option 1:

        <finds anything with 4 3/4 in. or 12 cm. diameter in 007>
        007 byte 06=“g”
 
        OR
 
        option 2:
        <finds anything with 4 3/4 in. or 12 cm. diameter in 300c>
        300c=“4 ¾ in” OR "12 cm"
 
        OR
 
        option 3:
        <finds anything with "compact disc" OR "CD" OR "audio disc" listed in the specified fields; this has a nested AND statement only specific to option 3>
 
        (the term "compact disc" OR "CD" OR "audio disc" appears in the 300a, 300b, 300e, 305a, 305b, 305c, 338a, 538a, or 690a)
        AND
        (the term "33 1/3" OR "33 ⅓" OR "33⅓" does NOT appear in the 300a, 300b, 300e, 305a, 305b, 305c, 338a, 538a, or 690a)
 
        ********/
        if ( itemEquals(recType, "j") || itemEquals(recType, "i") || setItemContains(set_gmd, "sound") || itemEquals(medium, "sd") ) {

            String _007Char6 = "";
            String temp_007Char6 = indexer.getFirstFieldVal(record, "007[6]");
            if (temp_007Char6 != null)  {
               _007Char6 = temp_007Char6;
            }

            if (itemEquals(_007Char6, "g")) {

                result.add("Audio CD");

            } else if (
                    (setItemContains(set_medium2, "compact disc") || setItemContainsTokenized(set_medium2, "CD") || setItemContains(set_medium2, "audio disc") )
                    &&
                    !( setItemContains(set_medium2, "33 1/3") || setItemContains(set_medium2, "33 ⅓") || setItemContains(set_medium2, "33⅓") ||  setItemContains(set_medium2, "33 ¹/₃") || setItemContains(set_medium2, "33¹/₃"))
            ) {

                result.add("Audio CD");

            } else {

                Set set_300c = new LinkedHashSet();
                addSubfieldDataToSet(record, set_300c, "300", "c");

                if (
                    setItemContains(set_300c, "12 cm") || setItemContains(set_300c, "4 3/4") || setItemContains(set_300c, "4 ¾") || setItemContains(set_300c, "4¾") ||  setItemContains(set_300c, "4 ³/₄") || setItemContains(set_300c, "4³/₄")
                ) {
                    result.add("Audio CD");
                }
            }
        }

        // Audiocassette:
        // (RecType=j OR RecType=i OR GMD="sound*")
        // AND
        // (Medium2=audiocassette OR Medium2=cassette? OR Medium=ss)
        if (
           ( itemEquals(recType, "j") || itemEquals(recType, "i") || setItemContains(set_gmd, "sound") )
           &&
           ( setItemContainsTokenized(set_medium2, "cassette") || itemEquals(medium, "ss") )
        ) {
           result.add("Audiocassette");
        }

        // Vinyl LP:
        // (RecType=j OR RecType=i OR GMD="sound*" OR Medium=sd)
        // AND
        // (Medium2="33 1/3")
        if (
           ( itemEquals(recType, "j") || itemEquals(recType, "i") || setItemContains(set_gmd, "sound") || itemEquals(medium, "sd") )
           &&
           ( setItemContains(set_medium2, "33 1/3") || setItemContains(set_medium2, "33 ⅓") || setItemContains(set_medium2, "33⅓") ||  setItemContains(set_medium2, "33 ¹/₃") || setItemContains(set_medium2, "33¹/₃"))
        ) {
           result.add("Vinyl LP");
        }


        /****
          Braille materials:
          (008/23=f OR 006/06=f) AND RecType=acdijopt
          OR
          (008/29=f OR 006/12=f) AND RecType=efgkr
          OR
          term "braille" appears in 245h, 250a, 300abe, 340n, 440a, 490a, 655a
          OR
          (336b="tct" OR 336b="tcn" OR 336a="tactile text" OR 336a="tactile notated music") AND term "braille" appears in 650a

          Large print materials:
          (006/23=d OR 006 position 06=d) AND RecType=acdijopt
          OR
          (008/29=d or 006/12=d) AND RecType=efgkr
          OR
          terms "giant print" OR "large print" appear in 250a, 300abe, 340n, 440a, 490a
         ****/
        Set set_blp = new LinkedHashSet();
        addSubfieldDataToSet(record, set_blp, "250", "a");
        addSubfieldDataToSet(record, set_blp, "300", "a");
        addSubfieldDataToSet(record, set_blp, "300", "b");
        addSubfieldDataToSet(record, set_blp, "300", "e");
        addSubfieldDataToSet(record, set_blp, "340", "n");
        addSubfieldDataToSet(record, set_blp, "440", "a");
        addSubfieldDataToSet(record, set_blp, "490", "a");

        Set set_650a = new LinkedHashSet();
        addSubfieldDataToSet(record, set_650a, "650", "a");

        Set set_655a = new LinkedHashSet();
        addSubfieldDataToSet(record, set_655a, "655", "a");

        Set set_336a = new LinkedHashSet();
        addSubfieldDataToSet(record, set_336a, "336", "a");

        Set set_336b = new LinkedHashSet();
        addSubfieldDataToSet(record, set_336b, "336", "b");

        String _008_23 = "";
        String t008_23 = indexer.getFirstFieldVal(record, "008[23]");
        if (t008_23 != null) {
            _008_23 = t008_23.toLowerCase(Locale.US);
        } else {
            _008_23 = "";
        }

        String _006_23 = "";
        String t006_23 = indexer.getFirstFieldVal(record, "006[23]");
        if (t006_23 != null) {
            _006_23 = t006_23.toLowerCase(Locale.US);
        } else {
            _006_23 = "";
        }

        String _006_06 = "";
        String t006_06 = indexer.getFirstFieldVal(record, "006[6]");
        if (t006_06 != null) {
            _006_06 = t006_06.toLowerCase(Locale.US);
        } else {
            _006_06 = "";
        }

        String _008_29 = "";
        String t008_29 = indexer.getFirstFieldVal(record, "008[29]");
        if (t008_29 != null) {
            _008_29 = t008_29.toLowerCase(Locale.US);
        } else {
            _008_29 = "";
        }

        String _006_12 = "";
        String t006_12 = indexer.getFirstFieldVal(record, "006[12]");
        if (t006_12 != null) {
            _006_12 = t006_12.toLowerCase(Locale.US);
        } else {
            _006_12 = "";
        }


        // Begin "Braille"
        //  (008/23=f OR 006/06=f) AND RecType=acdijopt
        if (
           (_008_23.equals("f") || _006_06.equals("f"))
              &&
           (recType.equals("a") || recType.equals("c") || recType.equals("d") || recType.equals("i") || recType.equals("j") || recType.equals("o") || recType.equals("p") || recType.equals("t"))
       ) {
           result.add("Braille");
       } else {
            //   (008/29=f OR 006/12=f) AND RecType=efgkr
           if (
               (_008_29.equals("f") || _006_12.equals("f"))
                  &&
               (recType.equals("e") || recType.equals("f") || recType.equals("g") || recType.equals("k") || recType.equals("r"))
           ) {
               result.add("Braille");
           } else {

              // term "braille" appears in 245h, 250a, 300abe, 340n, 440a, 490a, 655a
              //       note the following equivalents: set_gmd = 245h, set_blp = (250a, 300abe, 340n, 440a, 490a), set_655a = 655a
              if (
                  setItemContains(set_gmd, "braille") || setItemContains(set_blp, "braille") || setItemContains(set_655a, "braille")
              ) {
                   result.add("Braille");
              } else {

                  // (336b="tct" OR 336b="tcn" OR 336a="tactile text" OR 336a="tactile notated music") AND term "braille" appears in 650a
                  if (
                      setItemContains(set_650a, "braille")
                          &&
                      (setItemEquals(set_336b, "tct") || setItemEquals(set_336b, "tcn") ||
                       setItemEquals(set_336a, "tactile text") || setItemEquals(set_336a, "tactile notated music"))
                  ) {
                       result.add("Braille");
                  }

              } 

           }
       } // End "Braille"

        // Begin "Large Print"
        //  (006/23=d OR 006 position 06=d) AND RecType=acdijopt
        if (
            (_006_23.equals("d") || _006_06.equals("d"))
              &&
           (recType.equals("a") || recType.equals("c") || recType.equals("d") || recType.equals("i") || recType.equals("j") || recType.equals("o") || recType.equals("p") || recType.equals("t"))
       ) {
           result.add("Large Print");
       } else {
            // (008/29=d or 006/12=d) AND RecType=efgkr
            if (
               (_008_29.equals("d") || _006_12.equals("d"))
                  &&
               (recType.equals("e") || recType.equals("f") || recType.equals("g") || recType.equals("k") || recType.equals("r"))
           ) {
               result.add("Large Print");
           } else {
              // terms "giant print" OR "large print" appear in 250a, 300abe, 340n, 440a, 490a
              //       note the following equivalents: set_blp = (250a, 300abe, 340n, 440a, 490a)
              if (
                  setItemContains(set_blp, "giant print") || setItemContains(set_blp, "large print") 
              ) {
                   result.add("Large Print");
              }
           }
       } // End "Large Print"


//logger.debug("Formats results = " + result + "\n");
        return result;
    }





    public void addSubfieldDataToSet(Record record, Set set, String field, String subfield)
    {
        if (field.equals("000"))
        {
            Leader leader = record.getLeader();
            String val = leader.toString();
            set.add(val);
            return;
        }
        List fields = record.getVariableFields(field);
        Iterator fldIter = fields.iterator();
        while (fldIter.hasNext())
        {
            if (subfield != null)
            {
                DataField dfield = (DataField) fldIter.next();
                List sub = dfield.getSubfields(subfield.charAt(0));
                Iterator iter = sub.iterator();
                while (iter.hasNext())
                {
                    Subfield s = (Subfield) (iter.next());
                    String data = s.getData();
                    data = Utils.cleanData(data);
                    set.add(data);
                }
            }
            else
            {
                ControlField cfield = (ControlField) fldIter.next();
                set.add(cfield.getData());
            }
        }
    }


    ////////////
    // String/pattern matching methods
    ///////////

    // for sets
    public static boolean setItemMatches(Set set, String pattern, Comparitor c)
    {
        if (set.isEmpty()) {
                return(false);
        }

        Iterator iter = set.iterator();

        while (iter.hasNext())
        {
            String value = (String)iter.next();

            if (c.compare(value, pattern)) {
               return true;
            }

        }
        return false;
    }
    public static boolean setItemEquals(Set set, String pattern)
    {
       return setItemMatches(set, pattern, equalsComparitor);
    }
    public static boolean setItemBeginsWith(Set set, String pattern)
    {
       return setItemMatches(set, pattern, beginsWithComparitor);
    }
    public static boolean setItemContains(Set set, String pattern)
    {
       return setItemMatches(set, pattern, containsComparitor);
    }
    public static boolean setItemContainsTokenized(Set set, String pattern)
    {
       return setItemMatches(set, pattern, tokenizedContainsComparitor);
    }




    // for individual items
    public static boolean itemMatches(String item, String pattern, Comparitor c)
    {
       return c.compare(item, pattern);
    }
    public static boolean itemEquals(String item, String pattern) {
       return itemMatches(item, pattern, equalsComparitor);
    }
    public static boolean itemBeginsWith(String item, String pattern) {
       return itemMatches(item, pattern, beginsWithComparitor);
    }

